// FIXME some of these tests are no longer deterministic because of the
// any tile - we should probably create a separate test for the any tile and any operation
// and remove the tile from these tests here

describe('Custom Supply Setup creation and run through', () => {
  before(() => {
    // @ts-ignore disable-line
    cy.cleanupIndexedDB()
      .visit('settings')
      .wait(1000)
      .selectAllExpansions()
      .deselectAllSupplySetups()
  })

  after(() => {
    // @ts-ignore disable-line
    cy.visit('settings')
      .wait(1000)
      // @ts-ignore disable-line
      .deselectAllExpansions()
      .selectAllSupplySetups()
      .cleanupIndexedDB()
  })

  it('creates an empty custom supply setup', () => {
    cy.get('[data-test=SupplySetups]').click({ force: true })
    cy.get('[data-test=btn-add-custom-supply-setup]').click()
    cy.get('[data-test=input-name]')
      .find('input')
      .type('Test-Supply-Setup-Empty')
    cy.get('[data-test=btn-save-custom-supply-setup]').click()
    cy.get('span').contains('Test-Supply-Setup-Empty').should('exist').click()
  })

  it('empty supply setup should not be shown in randomizer', () => {
    cy.visit('randomizer/supply')
    cy.wait(1000)
    cy.get('[data-test=Supply]').click({ force: true })
    cy.get('span').contains('Test-Supply-Setup-Empty').should('not.exist')
  })

  it('edits an existing custom supply setup', () => {
    cy.visit('settings')
    cy.wait(1000)
    cy.get('[data-test=SupplySetups]').click({ force: true })

    cy.get('span')
      .contains('Test-Supply-Setup-Empty')
      .closest('[data-test=supply-setup-wrapper]')
    cy.get('[data-test=btn-edit-custom-supply-setup]').click()
    cy.get('[data-test=input-name]')
      .find('input')
      .clear()
      .type('Test-Supply-Setup')
    cy.get('[data-test=btn-save-custom-supply-setup]').click()
    cy.get('span').contains('Test-Supply-Setup').should('exist')
  })

  it('cancels edit of an existing custom supply setup', () => {
    cy.visit('settings')
    cy.wait(1000)
    cy.get('[data-test=SupplySetups]').click({ force: true })
    cy.get('span')
      .contains('Test-Supply-Setup')
      .closest('[data-test=supply-setup-wrapper]')
    cy.get('[data-test=btn-edit-custom-supply-setup]').click()
    cy.get('[data-test=input-name]')
      .find('input')
      .clear()
      .type('Test-Supply-Setup-Edit-Canceled')
    cy.get('[data-test=btn-cancel-edit-custom-supply-setup]').click()
    cy.get('span')
      .contains('Test-Supply-Setup-Edit-Canceled')
      .should('not.exist')
    cy.get('span').contains('Test-Supply-Setup').should('exist')
  })

  it('deletes an existing custom supply setup', () => {
    cy.visit('settings')
    cy.wait(1000)
    cy.get('[data-test=SupplySetups]').click({ force: true })
    cy.get('span')
      .contains('Test-Supply-Setup')
      .closest('[data-test=supply-setup-wrapper]')
    cy.get('[data-test=btn-delete-custom-supply-setup]').click({ force: true })
    cy.get('[data-test=YES]').click()
    cy.get('[data-test=SupplySetups]')
    cy.get('span').contains('Test-Supply-Setup').should('not.exist')
  })

  it('creates a supply setup with all card types EXCEPT ANY and all different thresholds <,>,=,<=,>=, OR', () => {
    cy.visit('settings')
    cy.wait(1000)
    cy.get('[data-test=SupplySetups]').click({ force: true })
    cy.get('[data-test=btn-add-custom-supply-setup]').click()

    // Set supply setup nam
    cy.get('[data-test=input-name]').find('input').type('Test-Supply-Setup')

    // 1. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Gem with operation = and threshold 2
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Gem')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Gem')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('=')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', '=')

    cy.get('[data-test=input-threshold]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('2')

    // 2. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Relic with operation "=" and threshold 5
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Relic')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Relic')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('=')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', '=')

    cy.get('[data-test=input-threshold]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('5')

    // 3. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Spell with operation ">=" and threshold 8
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Spell')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Spell')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('>=')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', '>=')

    cy.get('[data-test=input-threshold]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('8')

    // 4. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Gem with operation "<" and threshold 4
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Gem')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Gem')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('<')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', '<')

    cy.get('[data-test=input-threshold]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('4')

    // 5. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Relic with operation "<=" and threshold 2
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Relic')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Relic')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('<=')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', '<=')

    cy.get('[data-test=input-threshold]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('2')

    // 6. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Spell with operation "OR" and values 3 and 5
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Spell')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Spell')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('OR')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'OR')

    cy.get('[data-test=input-value-1]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('3')

    cy.get('[data-test=input-value-2]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('5')

    // 7. tile
    cy.get('[data-test=btn-add-supply-tile]').click()

    // Should be a Gem with operation ">" and threshold 5
    cy.get('[data-test=select-type]').eq(0).click()
    cy.root()
      .find('#menu-type')
      .get('[data-test=select-type-menu-item]')
      .contains('Gem')
      .click()
    cy.root()
      .get('[data-test=select-type]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', 'Gem')

    cy.get('[data-test=select-operation]').eq(0).click()
    cy.root()
      .find('#menu-operation')
      .get('[data-test=select-operation-menu-item]')
      .contains('>')
      .click()
    cy.root()
      .get('[data-test=select-operation]')
      .eq(0)
      .find('input')
      .should('have.attr', 'value', '>')

    cy.get('[data-test=input-threshold]')
      .eq(0)
      .should('be.visible')
      .find('input')
      .type('5')

    // Save setup
    cy.get('[data-test=btn-save-custom-supply-setup]').click()
    cy.get('span')
      .contains('Test-Supply-Setup')
      .should('exist')
      .click()
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(0)
      .should('have.attr', 'type', 'gem')
      .should('contain', '= 2')
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(1)
      .should('have.attr', 'type', 'gem')
      .should('contain', '< 4')
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(2)
      .should('have.attr', 'type', 'gem')
      .should('contain', '> 5')
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(3)
      .should('have.attr', 'type', 'relic')
      .should('contain', '<= 2')
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(4)
      .should('have.attr', 'type', 'relic')
      .should('contain', '5')
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(5)
      .should('have.attr', 'type', 'spell')
      .should('contain', '3/5')
      .closest('[data-test=supply-setup-wrapper]')
      .find('li')
      .eq(6)
      .should('have.attr', 'type', 'spell')
      .should('contain', '>= 8')
  })

  it('should role correct cards for the created custom supply setup', () => {
    cy.visit('randomizer/supply')
    cy.wait(1000)
    cy.get('[data-test=Supply]').click({ force: true })
    cy.get('span').contains('Test-Supply-Setup').should('exist').click()
    cy.get('[data-test=btn-create-market]').click()
    cy.get('[data-test=market-tile-gem]')
      .eq(0)
      .find('[data-test=market-tile-cost] span')
      .invoke('text')
      .then((value) => expect(parseInt(value)).to.be.eq(2))
    cy.get('[data-test=market-tile-gem]')
      .eq(1)
      .find('[data-test=market-tile-cost] span')
      .invoke('text')
      .then((value) => expect(parseInt(value)).to.be.lt(4))
    cy.get('[data-test=market-tile-gem]')
      .eq(2)
      .find('[data-test=market-tile-cost] span')
      .invoke('text')
      .then((value) => expect(parseInt(value)).to.be.gt(5))
    cy.get('[data-test=market-tile-relic]')
      .eq(0)
      .find('[data-test=market-tile-cost] span')
      .invoke('text')
      .then((value) => expect(parseInt(value)).to.be.lte(2))
    cy.get('[data-test=market-tile-relic]')
      .eq(1)
      .find('[data-test=market-tile-cost] span')
      .invoke('text')
      .then((value) => expect(parseInt(value)).to.be.eq(5))
    cy.get('[data-test=market-tile-spell]')
      .eq(0)
      .find('[data-test=market-tile-cost] span')
      .invoke('text')
      .then((value) => expect(parseInt(value)).to.be.oneOf([3, 5]))
  })
})
